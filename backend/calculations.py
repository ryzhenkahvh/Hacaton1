# -*- coding: utf-8 -*-
"""consumtion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/nastassi0/743c18de9758d9f2a87173e1ec3924b4/consumtion.ipynb
"""
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import PatternFill
from datetime import datetime
import csv
import os
import warnings

# Игнорируем RuntimeWarning (если нужно)
warnings.filterwarnings("ignore", category=RuntimeWarning)


def main():
    try:
        # Проверка и загрузка файла
        excel_path = "Задание_2_Потребление_электроэнергии_Апрель.xlsx"

        if not os.path.exists(excel_path):
            raise FileNotFoundError(f"Файл не найден: {os.path.abspath(excel_path)}")

        data = pd.read_excel(excel_path, header=1)
        print("Файл успешно загружен!")

        min_consumption = 10
        tariff = 0.2

        # Основные расчеты
        total_sum = data.iloc[:, 2:].sum().sum()
        sum_price = total_sum * tariff

        # Оптимизация (замена значений < min_consumption на 0)
        optimization = data.mask(data.iloc[:, 2:] < min_consumption, 0)
        total_opt_sum = optimization.iloc[:, 2:].sum().sum()
        opt_price = total_opt_sum * tariff

        # Выявление пиков потребления (с обработкой NaN)
        opt_nan = optimization.mask(optimization == 0)
        opt_mean = opt_nan.mean()
        std_deviation = opt_nan.std()
        n_std = 1.5
        min_peak_height = opt_mean + n_std * std_deviation

        # Исправленная часть: игнорируем NaN при сравнении
        peak = optimization.iloc[:, 2:].copy()
        for col in peak.columns:
            peak[col] = peak[col].where(
                (peak[col] > min_peak_height[col]) & (~pd.isna(peak[col]))
            )

        # Создание размеченного файла Excel
        output_file = "analyzed_marked.xlsx"
        data.to_excel(output_file, index=False, engine='openpyxl')

        # Разметка цветом
        wb = load_workbook(output_file)
        ws = wb.active

        red_fill = PatternFill(start_color="FF8080", end_color="FF8080", fill_type="solid")
        yellow_fill = PatternFill(start_color="FFFF60", end_color="FFFF60", fill_type="solid")

        for row in ws.iter_rows(min_row=2, max_row=ws.max_row):
            for cell in row:
                if cell.column > 2:
                    original_value = data.iloc[cell.row - 2, cell.column - 1]
                    optimized_value = optimization.iloc[cell.row - 2, cell.column - 1]

                    if optimized_value == 0 and original_value != 0:
                        cell.fill = yellow_fill

                    if not pd.isna(peak.iloc[cell.row - 2, cell.column - 3]) and peak.iloc[
                        cell.row - 2, cell.column - 3] == original_value:
                        cell.fill = red_fill

        wb.save(output_file)

        # Добавление листа с пиками
        with pd.ExcelWriter(output_file, engine="openpyxl", mode="a") as writer:
            peak.to_excel(writer, sheet_name="Peaks data", index=False)

        # Создание отчета
        total_diff = total_sum - total_opt_sum
        diff_price = total_diff * tariff

        report_lines = [
            ["Дата создания", datetime.now().strftime('%Y-%m-%d %H:%M:%S')],
            ["Минимальное потребление (кВт*ч)", min_consumption],
            ["Тариф (byn)", tariff],
            ["Общая сумма потребления (кВт*ч)", total_sum],
            ["Сумма к оплате (byn)", sum_price],
            ["Потребление не работающих приборов (кВт*ч)", total_diff],
            ["Сумма к оплате за не работающие приборы (byn)", diff_price],
            ["Общая сумма потребления после оптимизации (кВт*ч)", total_opt_sum],
            ["Сумма после оптимизации (byn)", opt_price]
        ]

        with open('consumption_report.csv', 'w', encoding='utf-8-sig') as f:
            writer = csv.writer(f, delimiter=";")
            writer.writerows(report_lines)

        print(f"Анализ завершен! Результаты сохранены в:")
        print(f"- {output_file} (размеченные данные)")
        print(f"- consumption_report.csv (отчет)")

    except FileNotFoundError as e:
        print(f"Ошибка: {e}")
        print("Проверьте:")
        print(f"1. Что файл находится в папке: {os.getcwd()}")
        print("2. Что имя файла указано правильно (учитывайте регистр и расширение)")
    except Exception as e:
        print(f"Произошла ошибка: {str(e)}")


if __name__ == "__main__":
    main()