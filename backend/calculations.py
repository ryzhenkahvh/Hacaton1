# -*- coding: utf-8 -*-
"""consumtion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/nastassi0/743c18de9758d9f2a87173e1ec3924b4/consumtion.ipynb
"""

import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import PatternFill
from datetime import datetime
import csv
#добавить эксельку в проект и сюда закинуть путь до нее
data = pd.read_excel('/content/Задание_2_Потребление_электроэнергии_Апрель.xlsx', header=1)

min_consumption = 10
tariff = 0.2;
#тут позже будут устанавливаться не дефолтные значения для min_consumption, tariff
data_time = data.iloc[:, :2]

sum = data.iloc[:, 2:].sum()
total_sum = data.iloc[:, 2:].sum().sum()
sum_price = total_sum * tariff
#print(sum)
#print(total_sum)

optimization = data.mask(data.iloc[:, 2:] < min_consumption, 0)
opt_sum = optimization.iloc[:, 2:].sum()
total_opt_sum = optimization.iloc[:, 2:].sum().sum()
opt_price = total_opt_sum * tariff

#print(opt_sum)
#print(total_opt_sum)

opt_nan = optimization.mask(optimization == 0)
opt_mean = opt_nan.mean()
std_deviation = opt_nan.std()
n_std = 1.5 #условная цифра для степени чувствительности к пикам
min_peak_height = opt_mean + n_std * std_deviation

peak = optimization.iloc[:, 2:].where(
    optimization.iloc[:, 2:] > min_peak_height[optimization.columns[2:]]
)
#print(peak)

copy_data = data.copy()
temp_file ="temp_output.xlsx"
copy_data.to_excel(temp_file, index=False, engine='openpyxl')

wb = load_workbook(temp_file)
ws = wb.active

# Создаем стили
red_fill = PatternFill(start_color="FF8080", end_color="FF8080", fill_type="solid")  # Красный для пиков
yellow_fill = PatternFill(start_color="FFFF60", end_color="FFFF60", fill_type="solid")  # Желтый для нулей

for row in ws.iter_rows(min_row=2, max_row=ws.max_row):
  for cell in row:
    if cell.column > 2:
      col_name = ws.cell(row=1, column=cell.column).value
      original_value = data.iloc[cell.row-2, cell.column-1]
      optimized_value = optimization.iloc[cell.row-2, cell.column-1]

      if optimized_value == 0 and original_value != 0:
        cell.fill = yellow_fill

      if not pd.isna(peak.iloc[cell.row-2, cell.column-3]) and peak.iloc[cell.row-2, cell.column-3] == original_value:
        cell.fill = red_fill

#сохранение эксель с крашеными ячейками
output_file = "analyzed_marked.xlsx"
#output_file = "C:/Users/Ваше_имя/Desktop/formatted_result.xlsx"  # Для Windows
wb.save(output_file)

with pd.ExcelWriter(output_file, engine="openpyxl", mode="a") as writer:
    peak.to_excel(writer, sheet_name="Peaks data", index=False)

print(f"Файл сохранен как {output_file}")

# в csv как потенциальный выигрыш, эксель тоже как доп инфа
difference = sum - opt_sum
total_diff = total_sum - total_opt_sum
diff_price = total_diff * tariff
#print(difference)
#print(total_diff)

#эту же информацию можно добавить в сообщение тг, тк здесь перечислено главное, а так же не присутствует табличных двнных
report_lines = [
    ["Дата создания", datetime.now().strftime('%Y-%m-%d %H:%M:%S')],
    ["Минимальное потребление (кВт*ч)", min_consumption],
    ["Тариф (byn)", tariff],
    ["Общая сумма потребления (кВт*ч)", total_sum],
    ["Сумма к оплате (byn)", sum_price],
    ["Потребление не работающих приборов (кВт*ч)", total_diff],
    ["Сумма к оплате за не работающие приборы (byn)", diff_price],
    ["Общая сумма потребления после оптимизации (кВт*ч)", total_opt_sum],
    ["Сумма после оптимизации (byn)", opt_price]
]

#csv_file = "consumption_report.csv"
with open('consumption_report.csv', 'w', encoding='utf-8-sig') as f:
    writer = csv.writer(f, delimiter=";")
    writer.writerows(report_lines)

print(f"Файл consumption_report.csv успешно создан!")
